@startuml
enum ObjectType {
    -- 3D Primitives --
    CONE
    CUBOID
    CYLINDER
    SPHERE
    -- 2D Primitives --
    CIRCLE
    ELLIPSE
    LINE
    POLYLINE
    POLYGON
    RECTANGLE
    -- Others --
    CHARACTER
    TEXT
}

enum ModeType {
    VIEW
    CREATE
    EDIT
}

enum ManipulatorType {
    ROTATE
    SCALE
    TRANSALATE
}

class Vector <<struct>> {
    +x : Number
    +y : Number
    +z : Number
}

class Store <<store>> {
    +getState() : Object
    +dispatch(action : Object)
}
Store "1" *-- "1" reducers.Reducer

namespace actions {
    namespace camera {
        class Rotate <<action>> {
            +type : String = 'CAMERA_ROTATE'
            +payload : Number
            {static} +create(angle : Number) : Action
        }
        note bottom of Rotate
            Payload means angle
        end note

        class Translate <<action>> {
            +type : String = 'CAMERA_TRANSLATE'
            +payload : Vector
            {static} +create(position : Vector) : Action
        }
        note bottom of Translate
            Payload means position
        end note
    }

    namespace ground {
        class SetHeight <<action>> {
            +type : String = 'GROUND_SET_HEIGHT'
            +payload : { x : Number, y : Number, height : Number }
            +meta : { sync : boolean = true }
            {static} +create(x : Number, y : Number, height : Number) : Action
        }
    }

    namespace mode {
        class Mode <<action>> {
            +type : String = 'MODE_MODE';
            +payload : ModeType
            {static} +create(mode : ModeType) : Action
        }
        note bottom of Mode
            Payload means mode
        end note
    }

    namespace editor {
        class Select <<action>> {
            +type : String = 'EDITOR_SELECT';
            +payload : String
            {static} +create(id : String) : Action
        }
        note bottom of Select
            Payload means id
        end note

        class Manipulator <<action>> {
            +type : String = 'EDITOR_MANIPULATOR'
            +payload : ManipulatorType
            {static} +create(manipulator : ManipulatorType)
        }
        note bottom of Manipulator
            Payload means manipulator
        end note
    }

    namespace object {
        class Create <<action>> {
            +type : String = 'OBJECT_CREATE'
            +payload : { id : String, position : Vector, timestamp : Number }
            +meta : { sync : boolean = true }
            {static} +create(position : Vector) : Action
        }

        class Translate <<action>> {
            +type : String = 'OBJECT_TRANSLATE'
            +paylaod : { id : String, position : Vector }
            +meta : { sync : boolean = true }
            {static} +create(id : String, position : Vector) : Action
        }

        class Rotate <<action>> {
            +type : String = 'OBJECT_ROTATE'
            +paylaod : { id : String, angle : Number }
            +meta : { sync : boolean = true }
            {static} +create(id : String, angle : Number) : Action
        }

        class Remove <<action>> {
            +type : String = 'OBJECT_REMOVE'
            +paylaod : String
            +meta : { sync : boolean = true }
            {static} +create(id : String) : Action
        }
        note bottom of Remove
            Payload means id
        end note
    }

    namespace room {
        class Update <<action>> {
            +type : String = 'ROOM_UPDATE'
            +payload : { title : String, size : Vector }
            +meta : { sync : boolean = true }
            {static} +create(title : String, size : Vector) : Action
        }
    }
}

namespace components {
}

namespace graphics {
    class Obj {
        +id : String
        +type : ObjectType
        +position : Vector
        +size : Vector
        +rotation : Vector
        +text : String
        +timestamp : Number
    }
    THREE.Mesh <|.. Obj
}

namespace reducers {
    class Reducer <<reducer>> {
        +camera : Camera
        +editor : Editor
        +mode : Mode
        +room : Room
        +scene : Scene
    }

    class Camera <<reducer>> {
        +state : THREE.Camera
    }
    Reducer "1" *-- "1" Camera
    Camera <-- actions.camera.Rotate : Set state.rotation
    Camera <-- actions.camera.Translate :  Set state.position
    Camera "1" *-- "1" THREE.Camera

    class Editor <<reducer>> {
        +state : { selected : String, manipulator: ManipulatorType }
    }
    Reducer "1" *-- "1" Editor
    Editor <-- actions.editor.Select : Set state.selected
    Editor <-- actions.editor.Manipulator : Set state.manipulator

    class Mode <<reducer>> {
        +state : String
    }
    Reducer "1" *-- "1" Mode
    Mode <-- actions.mode.Mode : Set state

    class Room <<reducer>> {
        +state : { title : String, size : Vector }
    }
    Reducer "1" *-- "1" Room
    Room <-- actions.room.Update

    class Scene <<reducer>> {
        +state : THREE.Scene
    }
    Reducer "1" *-- "1" Scene
    Scene <-- actions.ground.SetHeight : Update ground geometry
    Scene <-- actions.object.Create : Add new Obj
    Scene <-- actions.object.Translate : Set obj[id].position
    Scene <-- actions.object.Rotate : Set obj[id].rotation
    Scene <-- actions.object.Remove : Remove obj[id]
    Scene <-- actions.editor.Select : Set obj[i] selected
    Scene "1" *-- "1" THREE.Scene
}

package THREE {
    class Scene {
        +add(mesh : Mesh)
    }

    class Camera {
    }

    class Geometry {
    }

    class Material {
    }

    class Mesh {
        +position : Vector
        +rotation : Vector
    }

    class Renderer {
        +render(scene : Scene, camera : Camera)
    }

    Mesh "1" o-- "1" Geometry
    Mesh "1" o-- "1" Material

    Scene "1" o-- "0..*" Mesh
}

@enduml