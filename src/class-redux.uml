@startuml
!include class-common.iuml

class Store <<store>> {
    +getState() : Object
    +dispatch(action : Object)
}
Store "1" *-- "1" reducers.Reducer

namespace reducers {
    class Reducer <<reducer>> {
        +camera : Camera
        +editor : Editor
        +mode : Mode
        +room : Room
        +scene : Scene
    }

    class Camera <<reducer>> {
        +state : THREE.Camera
    }
    Reducer "1" *-- "1" Camera
    Camera <-- actions.camera.Rotate : Set state.rotation
    Camera <-- actions.camera.Translate :  Set state.position
    Camera "1" *-- "1" THREE.Camera

    class Editor <<reducer>> {
        +state : { selected : String, manipulator: ManipulatorType }
    }
    Reducer "1" *-- "1" Editor
    Editor <-- actions.editor.Select : Set state.selected
    Editor <-- actions.editor.Manipulator : Set state.manipulator

    class Mode <<reducer>> {
        +state : String
    }
    Reducer "1" *-- "1" Mode
    Mode <-- actions.mode.Mode : Set state

    class Room <<reducer>> {
        +state : { title : String, size : Vector }
    }
    Reducer "1" *-- "1" Room
    Room <-- actions.room.Update

    class Scene <<reducer>> {
        +state : THREE.Scene
    }
    Reducer "1" *-- "1" Scene
    Scene <-- actions.ground.SetHeight : Update ground geometry
    Scene <-- actions.object.Create : Add new Obj
    Scene <-- actions.object.Translate : Set obj[id].position
    Scene <-- actions.object.Rotate : Set obj[id].rotation
    Scene <-- actions.object.Remove : Remove obj[id]
    Scene <-- actions.editor.Select : Set obj[i] selected
    Scene "1" *-- "1" THREE.Scene
}

@enduml