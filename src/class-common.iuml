enum ObjectType {
    -- 3D Primitives --
    CONE
    CUBOID
    CYLINDER
    SPHERE
    -- 2D Primitives --
    CIRCLE
    ELLIPSE
    LINE
    POLYLINE
    POLYGON
    RECTANGLE
    -- Others --
    CHARACTER
    TEXT
}

enum ModeType {
    VIEW
    TERRAIN
    CREATE
    OBJECTEDIT
}

enum ObjectEditorModeType {
    ROTATE
    SCALE
    TRANSALATE
}

class Vector <<struct>> {
    +x : Number
    +y : Number
    +z : Number
}

namespace actions {
    namespace camera {
        class Rotate <<action>> {
            +type : String = 'CAMERA_ROTATE'
            +payload : Number
            {static} +create(angle : Number) : Action
        }
        note bottom of Rotate
            Payload means angle
        end note

        class Translate <<action>> {
            +type : String = 'CAMERA_TRANSLATE'
            +payload : Vector
            {static} +create(position : Vector) : Action
        }
        note bottom of Translate
            Payload means position
        end note

        class Zoom <<action>> {
            +type : String = 'CAMERA_ZOOM'
            +payload : Number
            {static} +create(zoom : Number) : Action
        }
        note bottom of Zoom
            Payload means zoom
        end note
    }

    namespace terrain {
        class SetHeight <<action>> {
            +type : String = 'terrain_SET_HEIGHT'
            +payload : { x : Number, y : Number, height : Number }
            +meta : { sync : boolean = true }
            {static} +create(x : Number, y : Number, height : Number) : Action
        }
    }

    namespace terraineditor {
        class Select <<action>> {
            +type : String = 'TERRAIN_EDITOR_SELECT';
            +payload : { x : Number, z : Number }
            {static} +create(x : Number, z : Number) : Action
        }
    }

    namespace mode {
        class Mode <<action>> {
            +type : String = 'MODE_MODE';
            +payload : ModeType
            {static} +create(mode : ModeType) : Action
        }
        note bottom of Mode
            Payload means mode
        end note
    }

    namespace object {
        class Create <<action>> {
            +type : String = 'OBJECT_CREATE'
            +payload : { id : String, position : Vector, timestamp : Number }
            +meta : { sync : boolean = true }
            {static} +create(position : Vector) : Action
        }

        class Translate <<action>> {
            +type : String = 'OBJECT_TRANSLATE'
            +paylaod : { id : String, position : Vector }
            +meta : { sync : boolean = true }
            {static} +create(id : String, position : Vector) : Action
        }

        class Rotate <<action>> {
            +type : String = 'OBJECT_ROTATE'
            +paylaod : { id : String, angle : Number }
            +meta : { sync : boolean = true }
            {static} +create(id : String, angle : Number) : Action
        }

        class Scale <<action>> {
            +type : String = 'OBJECT_SCALE'
            +paylaod : Vector
            +meta : { sync : boolean = true }
            {static} +create(scale : Vector) : Action
        }
        note bottom of Scale
            Payload means scale
        end note

        class Remove <<action>> {
            +type : String = 'OBJECT_REMOVE'
            +paylaod : String
            +meta : { sync : boolean = true }
            {static} +create(id : String) : Action
        }
        note bottom of Remove
            Payload means id
        end note
    }

    namespace room {
        class Update <<action>> {
            +type : String = 'ROOM_UPDATE'
            +payload : { title : String, size : Vector }
            +meta : { sync : boolean = true }
            {static} +create(title : String, size : Vector) : Action
        }
    }

    namespace objecteditor {
        class Select <<action>> {
            +type : String = 'OBJECT_EDITOR_SELECT';
            +payload : String
            {static} +create(id : String) : Action
        }
        note bottom of Select
            Payload means id
        end note

        class Mode <<action>> {
            +type : String = 'OBJECT_EDITOR_MODE'
            +payload : ObjectEditorModeType
            {static} +create(mode : ObjectEditorModeType)
        }
        note bottom of Mode
            Payload means mode
        end note
    }
}

namespace graphics {
    class Obj {
        +id : String
        +type : ObjectType
        +position : Vector
        +size : Vector
        +rotation : Vector
        +text : String
        +timestamp : Number
    }
    THREE.Mesh <|.. Obj
}

package THREE {
    class Scene {
        +add(mesh : Mesh)
    }

    class Camera {
    }

    class Geometry {
    }

    class Material {
    }

    class Mesh {
        +position : Vector
        +rotation : Vector
    }

    class Renderer {
        +render(scene : Scene, camera : Camera)
    }

    Mesh "1" o-- "1" Geometry
    Mesh "1" o-- "1" Material

    Scene "1" o-- "0..*" Mesh
}
