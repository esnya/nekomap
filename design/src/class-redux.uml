@startuml
!include class-common.iuml

class Store <<store>> {
    +getState() : Object
    +dispatch(action : Object)
}
Store "1" *-- "1" reducers.Reducer

namespace reducers {
    class Reducer <<reducer>> {
        +camera : Camera
        +mode : Mode
        +room : Room
        +scene : Scene
        +objecteditor : ObjectEditor
        +terraineditor : TerrainEditor
    }

    class Camera <<reducer>> {
        +state : THREE.Camera
    }
    Reducer "1" *-- "1" Camera
    Camera <-- actions.camera.Rotate : Set state.rotation
    Camera <-- actions.camera.Translate :  Set state.position
    Camera <-- actions.camera.Zoom :  Set state.zoom(?)
    Camera "1" *-- "1" THREE.Camera

    class ObjectEditor <<reducer>> {
        +state : { selected : String, mode: ObjectEditModeType }
    }
    Reducer "1" *-- "1" ObjectEditor
    ObjectEditor <-- actions.objecteditor.Select : Set state.selected
    ObjectEditor <-- actions.objecteditor.Mode : Set state.mode

    class TerrainEditor <<reducer>> {
        +state : { selected : { x : Number, y : Numer } }
    }
    Reducer "1" *-- "1" TerrainEditor
    TerrainEditor <-- actions.terraineditor.Select : Set state.selected

    class Mode <<reducer>> {
        +state : String
    }
    Reducer "1" *-- "1" Mode
    Mode <-- actions.mode.Mode : Set state

    class Room <<reducer>> {
        +state : { title : String, size : Vector }
    }
    Reducer "1" *-- "1" Room
    Room <-- actions.room.Update

    class Scene <<reducer>> {
        +state : THREE.Scene
    }
    Reducer "1" *-- "1" Scene
    Scene <-- actions.terrain.SetHeight : Update terrain geometry
    Scene <-- actions.object.Create : Add new Obj
    Scene <-- actions.object.Translate : Set obj[id].position
    Scene <-- actions.object.Rotate : Set obj[id].rotation
    Scene <-- actions.object.Scale : Set obj[id].scale
    Scene <-- actions.object.Remove : Remove obj[id]
    Scene "1" *-- "1" THREE.Scene
}

@enduml