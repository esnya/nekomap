@startuml
page 1x2
!include class-common.iuml

namespace components {
    class App <<Component>> {
        +constructor({ title : String })
    }

    class Toolbar <<Component>> {
        +constructor({})
    }

    App "1" *-- "1" Canvas
    App "1" *-- "1" Toolbar

    class ModePalette <<Component>> {
        +constructor({ mode : ModeType })
    }
    Toolbar "1" *-- "1" ModePalette
    ModePalette --> actions.mode.Mode

    class ObjectTypePalette <<Component>> {
        +constructor({ type : ObjectType })
    }
    Toolbar "1" *-- "0..1" ObjectTypePalette
    note top of ObjectTypePalette
        Visible if mode is CREATE
    end note

    class ObjectEditorModePalette <<Component>> {
        +constructor({ mode : ObjectEditorMode })
    }
    Toolbar "1" *-- "0..1" ObjectEditorModePalette
    ObjectEditorModePalette --> actions.objecteditor.Mode
    note top of ObjectEditorModePalette
        Visible if mode is OBJECTEDIT
    end note

    class Canvas <<Component>> {
        -renderer : THREE.Renderer
        +constructor({ mode : String, editor : Object, scene : THREE.Scene, camera : THREE.Camera })
    }
    Canvas "1" *-- "1" THREE.Renderer
    Canvas "1" -- "1" canvascontroller.CanvasController

    class RoomConfigDialog <<Component>> {
        +conctructor({ room : { title : String, size : Number }, open : boolean })
    }
    App "1" *-- "1" RoomConfigDialog
    RoomConfigDialog --> actions.room.Update
}

namespace canvascontroller {
    class CanvasController {
        +create(type : Any)
        +select(id : Any)
        +rotate(id : Any, angle : Number)
        +scale(id : Any, scale : Vector)
        +translate(id : Any, translate : Vector)
        +remove(id : Any)
        {static} +register(mode : ModeType, controller : CanvasController)
        {static} +get(mode : ModeType)
    }

    class ViewController {
    }
    CanvasController <|.. ViewController
    ViewController --> actions.camera.Zoom
    ViewController --> actions.camera.Rotate
    ViewController --> actions.camera.Translate

    class TerrainController {
    }
    CanvasController <|.. TerrainController
    TerrainController --> actions.terraineditor.Select
    TerrainController --> actions.terrain.SetHeight

    class ObjectController {
    }
    CanvasController <|.. ObjectController
    ObjectController --> actions.objecteditor.Select
    ObjectController --> actions.object.Create
    ObjectController --> actions.object.Rotate
    ObjectController --> actions.object.Scale
    ObjectController --> actions.object.Translate
    ObjectController --> actions.object.Remove
}

@enduml